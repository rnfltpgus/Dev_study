/* .body {
  height: 3000px;
} */

/* 요소 쌓임 순서(stack order)
어떤 요소가 사용자와 더 가깝게 있는지(위에 쌓이는지)결정
1. 요소에 position 속성의 값이 있는 경우 위에 쌓임(기본값 static 제외)
2. 1번 조건이 같은 경우, z-index  속성의 숫자 값이 높을 수록 위에 쌓임
3. 1번과 2번 조건까지 같은 경우, html의 다음 구조일 수록 위헤 쌓임 */

/* .wrap {
  width: 400px;
  height: 300px;
  background-color: tomato;
  position: relative;
} */
.container {
  width: 300px;
  background-color: royalblue;
  position: relative;
  /* 요소의 위치를 지정하기위한 기준 포지션, 
  기본값으로
  static - 기준없음
  rleative - 요소 자신을 기준으로 배치
  absolute - 위치 상 부모 요소 기준
  fixed - 뷰포트(브라우저)를 기준
  sticky - 스크롤 영역 기준 */
}
.container .item {
  width: 100px;
  height: 100px;
  border: 4px dashed red;
  background-color: orange;
}
.container .item:nth-child(1) {
  /* width: 100px;
  height: 100px; */
  position: relative;
  z-index: 1;
  /* 요소의 쌓임 정도를 지정
  기본값 auto 부모 요소와 동일한 쌓임 정도 = 0라고 생각하면 쉬움
  숫자 숫자가 높을 수록 위에 쌓임
  음수도 사용할 수 있기때문에 -1까지 쓰긴하나 양수의 숫자 값을 많이 사용함 */
  /* 요소의 display가 변경됨
  position 속성의 값으로 absolute, fixed가 지정된 요소는, display 속성이 block으로 변경됨 */
}
.container .item:nth-child(2) {
  /* width: 140px;
  height: 70px;
  position: fixed;
  bottom: 30px;
  right: 60px; */
  /* position: relative;
  right: 10px;
  bottom: 10px; */
  /* 요소의 각 방향별 거리 지정
  top, bottom, left, right 등 기본으로 auto(브라우저가 계산) 값
  또는 단위 px, em, rem 등 단위로 지정됨 */
  position: absolute;
  top: 50px;
  left: 50px;
}
.container .item:nth-child(3) {
  /* width: 70px;
  height: 120px; */
  position: fixed;
  z-index: 9999;
}
span {
  width: 100px;
  height: 100px;
  background-color: orange;
  font-size: 40px;
  position: absolute;
}